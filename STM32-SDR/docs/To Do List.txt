Feature Request List
- This file contains feature requests from various sources.


*****************************
General (unassigned) Features
*****************************

- Allow operation without SI570
	- I2C to EEPROM should still work & device run at full speed after detecting no SI570.
	- Display error messages on screen when SI570 not found.
	- May need to redesign I2C communication into basic I2C functions and then modules for
	  SI570, EEPROM, and any other I2C devices. This way a module can detect device is not
	  found and then fail-fast vs waiting for extensive timeouts.

- UI Look:
	- Larger frequency display
	- Regenerate buttons to have black background.
	- For each option, store a "dirty" bit which indicates it's not yet written to EEPROM after a change.
	  Make the UI display dirty values differently than "clean" (different colour?)
	- Display feedback when user pressed a "save to EEPROM" button or the like.
	- Pressing left/right button displays message that stays on screen; Change functionality or display method.

- PSK Mode 
	[Milt's wish list; see screen mockup emailed Jul 20]
	- 4 lines of text displayed for PSK mode.
	- S Meter
	- Mode and Frequency displays
	- Record Button (to capture transmit and received text to a flash drive)
	- Tuning rate
	- Option button to change configuration.
	- In place of the spectral display--optional waterfall
	- Change mode either through the OPT button, or with a selector switch.
	[Aug 9]
	- White background colour for PSK text
	- Write received text into a four line, word-wrapping display on screen.
	- When 4 lines full, "scroll" up discarding content of top line and continue display on bottom line.
	- Able to delete characters received form USB keyboard (but not yet transmitted)
	
- SSB Mode [Milt's wishlist]
	- Display filter parameters, or graphical pass-band display.
	- Status of notch filter, noise blander, noise reduction display. 
	
- Handle pressing-in knobs: Save current? Reset to default? Change frequency step size (right knob)?
- Screen to edit the PSK macros.
- Hardware calibration and self-test feature/screen
- Associtade a mode (PSK, CW, SSB; SSB, USB) with each frequency band.
- Allow fine tuning the selected frequency (red line in FFT) without having to precisely touch FFT (ex: the right-encoder knob.

- Keyborad input:
	- Make input-key handling specific to which screen is active; plug into to event handler?
	- Allow a pseudo-focus capability on a screen.
	- Have edit-box widget for screen.
	
- PSK Bugs:
	- Have to change frequency on start before it receives anything. (via Dave, July 30 2013)
	- Able to overflow the buffer by pressing F#-key macro multiple times.

- USB Bugs:
	- Seems to work better when board powered down for 1 minute, plug in USB keyboard and then boot.
	- Seems not to support USB hot-swapping.

- Other:
	- Makefile dependencies are not working: changing a .h file does not recompile the .c files.
	- Clicking sound when switching screens or saving values to EEPROM.
	- Add time-base to the code to support time-outs, and tracking real-world time.
	- Create textbox widget
	- Beep through headphone jack: touchscreen feedback, notification of crash (assert), 
	  help track progress at startup for debugging (play a jingle?)
	- Serial port support
	- Display LCD driver chip ID at startup.

*********************************
Features Brian Hopes to Implement
*********************************
- Check-in coding standard

- Debug USB
	- Indictation on LCD that USB keyboard attached
	- "On the new board the OTG_FS_OverCurrent signal was moved from PD5 to PB8"
	  Pin shared on discovery board as fault output of U6; may need to turn overcurrent off in software.
	  See July 22nd email form Charley for thoughts.
	
- Other:
	- Remove all LCD_StringLine() calls and delete function.
	- Remove code in graphicObject.c
	- Compile out asserts
	